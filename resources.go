// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ30/bOhR+719h5fEiEq64SFeTW6TBqmkChIDt3U1OW2uOndlOAUX93ycnIb8Tl7UUtvGCZJ/P58TH5/uOa/DpQ8jQCqSigo+df90jBwH3RUD5Yux8vZse/u+cTkaYSE19BpMRQlhTzWByLYUWvmDoXPhxCFwTTQXHXmYdIZQkkvAFIHdKGaj12ixV4BuUMReOksS9IiGs15W1ZnVEJEHuOShf0sisSl1U/F6CUmSRuy6dIxqMnSRxpzFjmWMnc1mNeCH4oiPqUFxjo3PkfiZqSoEFqpjHmswYoLkkIYwdwlgRsAiJfUaU4iRsRS8NKHPb+CDjYiFFHCFfMDV2/qs4RwibyQh8Y7yngV6OnX8cb2vEkXtiBx03IXoJJKjOIISluK/PIISBa/k4SXeLvWzQDbl7jGAYcUFmwIYhlZPsBGKv8Y3Ya20E65kIGusq9V2rBuvGKwU/9N2YUf4dmT/Ay4o2KTEVnVdRNsSegU2G/ZkVJlu2uJ0MyEr/HOYkZvobYbGJanCTfO4DSpKm3UsBSQI86Anayr1Jawqvn0c9+9jLGFHQ2ksJWFK46qEg7acHDdzI3O6JewVKQ4DKCBYOn+yDw2+D5UVOtmX6R6IsiKs4nIF8ZTHoqDJrjl5JENr+zgTXhHLKFw3PpeH5opMdy1+lOtirXXSqprJQeBzu7+qyK6VLk2yTt+N9yNuWumT29hvISZbvnUvJdrTcF6l6aJQP+tp6/UdGUd7mV8ghgxWw/j6NKZ8LGRI2yJb3Tv7eyd87+R/VyWu830R88hq5Bbmi/q89Qbx8D+/o35egl+JtvDG8uGBle0X2Tn8DP2JQGtml6wZUJLiCDaAvrk/5Ue5BnPL8NJQkn91aqp5y2nKfTT9bpt7ehaVhqEhJ54PorU8YkdlVOy20Ol3tl5T+K4qNhh32Extgt/Y2B1qnlJ+0G0mhRT8Tn+4SQpsE9gPODg6sTr6QFbGCrh/1UvA+WKPcWmxvc73sMmlB1Jnel5an1pM+z1foVBkP7cFohEmYFXUWRRt5M5nbCJhlrxfaYmuTqw2m1nna0eErlBxhr/j/xs8AAAD//2FyhLQRGQAA",
	"html.tmpl": "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWz2/aMBS+5694IzusqgL3CjisXTVNbVW1aJdqWg08IJKxs9hBq2L/75N/JHaADKRKuyyX+Nl5L9/7vs9OUngsueQLTuGGL6otMklkzlkyJsDIFicDyYvBaJokaQozMqcIfAXXnElkUiR1XRK2Rhje5hSF1kldf1zlFH+aXLiawPCBbFHrDF7q2o9/fErb8UUC0Na4RyHI2pQBcAl3nK3jpNuK0jgR2VLruMQXVm3flf9bIhM5Z00R01dGcYcUwpotFvrUOsN2rafwM5a7fBH3dhpXc8/g5XlBKCnhO6EVwuytQINB2MlsZyYzaSYvkrMVCQK3WIzM4wIIzddsMijz9UYOpmMCmxJXk0FqjDCd8WI8ItPxqHCWaJOTuh7eoFiUeWH8o3UEJQjbeWvo2hvMlguaHS2Zr2D4lYjbHOnSFFRgh6AsLaDgjsyRgoIoE1SiIDMXuDt0Q3+Bitkz9SGzKqrQJqjWWOZ9sYAuvnBPWxT28bpmfF5CtxPXxw2uSEWlVVVr8OEV2L7jJe8EC7DrjcBIbN1EBbcGZj4TYW4P1XaOZR9Dhyy1JPWzFd59lLEOYS42JwjJWc7W+ysO3r+hzi2NP2QZIFvC1vsUsmwa2dcfKu/1rgKzdEqAM9i2nfUyfYq/iIlDBtC02rR/zFgRBz0HYMvH0aPz/3Xm64E1X3u9GQTp8L/ny/BNOcOaf7HlPcoNXzbufMJfFQrZSPOEouBMYBP3SrOvwn64H6v4+2AA9J+2HtL+oeunu2eve95hPivh1CY5kER42hs1/F5KUzj8Sht6h4X5w2r4e+ASBSi4vrxspr6RHWnGj29yw5mPjtMb8QiHW+PIHnCwAr2xWezfnyNjAKMpdKe8FgZyuz2KIl4z2OPY4W9mWnb+BAAA///ASSPYZwoAAA==",
	"scalars.json": "H4sIAAAAAAAA/9yXTWsaQRjH736KwVMKCYK1VnqrAcGz9hRSWHWybtnubnd3SqQUEpsSD6JQ1BQb2h5KWkqiPVj6EtN8mLiz5uRXKO6gO6Ozq4a0Id6W52Vm/r/5zwO7EQDgRQAAAIKarppquqDB4AMQzKkoI8PgKkkpqgmNYXgUyGoavzJr8OPieOUtWRXMaGSUeCI8F/gtWl5jesbxgplXFW5KR5nCKJFwEgEAXq56aGRa/SQyha5CJjwh8G6YJ5DV8a/1SQp1jLG+3tm5XftiVd9e1s/tbsP+uHuxU7Tav/qdD7j+jURwvWRX9vt/XvXOKoNu2Toq4veH1skBbn3vdZtkBVI/6Jb77R8kYjgbXuwUOQiZs7gIJYUDkKml8VHVFDxJMaEIdT4+qoWGF5dEBT0Fqg4S0vbwa0UwgA6fIUmHuTuzqLru/U9UoxFPqu5ZXKqyqohcrPxnR5dPcw0Zpi5RBZN4Q3T7NGNflmgBi3LkIw9XIa6t0DX7aobwK5kLLeAuDyA8QyC+I9DNWOJKZIwFrHL5pjR+erhdczrxuw55f8s+n4wFLDQNKhqZDepWj5wtaRvmOEayWs0xmUG3TMhYnz73flfCj8Mxu7mH6x0ymnG7hubx1M2Op2u2lcON4ytfbveiHG4zLXY7ppj/I5zHZks/iebxzHJOmYyqyvP8WdB1rkw6KnLXpFUO41BQOEInM4zCiSQtMK0juC4LhhFKCLJBPv1vmiHp3nP1q/V6t9/6+SidWIvhUuP+WkYywcPUejKJG/v48Jh/++xyLhc2LnpsT7NJsVec99iCJWOYeggpUlbNQR4dsiZYcUT5v4BMYUhiCovDpHd6iveq1smBfXy0GIZ4wYQpDxQbm8M9eSimu+bH4YfBuc21WDyZJiwCm4G/AQAA//+qprk/VRAAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
