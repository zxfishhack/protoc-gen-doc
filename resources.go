// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ30/bOhR+719h5fEiEq64SFeTW6TBqmkChIDt3U1OW2uOndlOAUX93ycnIb8Tl7UUtvGCZJ/P58TH5/uOa/DpQ8jQCqSigo+df90jBwH3RUD5Yux8vZse/u+cTkaYSE19BpMRQlhTzWByLYUWvmDoXPhxCFwTTQXHXmYdIZQkkvAFIHdKGaj12ixV4BuUMReOksS9IiGs15W1ZnVEJEHuOShf0sisSl1U/F6CUmSRuy6dIxqMnSRxpzFjmWMnc1mNeCH4oiPqUFxjo3PkfiZqSoEFqpjHmswYoLkkIYwdwlgRsAiJfUaU4iRsRS8NKHPb+CDjYiFFHCFfMDV2/qs4RwibyQh8Y7yngV6OnX8cb2vEkXtiBx03IXoJJKjOIISluK/PIISBa/k4SXeLvWzQDbl7jGAYcUFmwIYhlZPsBGKv8Y3Ya20E65kIGusq9V2rBuvGKwU/9N2YUf4dmT/Ay4o2KTEVnVdRNsSegU2G/ZkVJlu2uJ0MyEr/HOYkZvobYbGJanCTfO4DSpKm3UsBSQI86Anayr1Jawqvn0c9+9jLGFHQ2ksJWFK46qEg7acHDdzI3O6JewVKQ4DKCBYOn+yDw2+D5UVOtmX6R6IsiKs4nIF8ZTHoqDJrjl5JENr+zgTXhHLKFw3PpeH5opMdy1+lOtirXXSqprJQeBzu7+qyK6VLk2yTt+N9yNuWumT29hvISZbvnUvJdrTcF6l6aJQP+tp6/UdGUd7mV8ghgxWw/j6NKZ8LGRI2yJb3Tv7eyd87+R/VyWu830R88hq5Bbmi/q89Qbx8D+/o35egl+JtvDG8uGBle0X2Tn8DP2JQGtml6wZUJLiCDaAvrk/5Ue5BnPL8NJQkn91aqp5y2nKfTT9bpt7ehaVhqEhJ54PorU8YkdlVOy20Ol3tl5T+K4qNhh32Extgt/Y2B1qnlJ+0G0mhRT8Tn+4SQpsE9gPODg6sTr6QFbGCrh/1UvA+WKPcWmxvc73sMmlB1Jnel5an1pM+z1foVBkP7cFohEmYFXUWRRt5M5nbCJhlrxfaYmuTqw2m1nna0eErlBxhr/j/xs8AAAD//2FyhLQRGQAA",
	"html.tmpl": "H4sIAAAAAAAA/+xaf28cR/n/+/wqphd/v6Zp9vZ8tpNwXh9SHVsINaFqHFSEEJrbnbsdZfYHO3OuzemkiH9KhUqQaAEBKiCKBEhNGyEEpCW8Gc4J7wLNzuzuzM7u/bDPpUhRVHV3ZvZ5nnmez/OZ55mz89Ktr+8fffP1A+CzgPTW1hzxfwAcH0GPPwDgMMwI6o3H660j/jSZOLYYEtMBYhC4PkwoYnvNe0eH1s2mnCI4vA8SRPaalJ0SRH2EWBOw0xjtNRk6YbZLaRP4CRrsNX3G4q5tD6KQ0dYwioYEwRjTlhsFfNlXBjDA5HTvXn8UslF3u92+dqPdvrbdbmMGCXabttSZahLPAPQj7xSM5QsAb2GP+V1wvY2C3XwwgMkQh12wiQIARywqZtyIREkXXOl0OsUgN9ASxnRBU5jTvAYoDKlFUYIHxdIYeh4Oh1Y/YiwKumC7UDtZkw/+pmJfKvsthIc+64IwSgJICmn9KPFQkgvbjE8AjQj2wBUIYb3SdmsHnZhqO4raVUhW/NjaQQFomyq3Pt+dNgDg//nb/xUHQ0Urh7rlITdKIMNRyDWHyITZzvUbqLNjSGKwT5AJ4s12+/9KqKT4e6gLbqrjck9uRAiMKeqC7MlUwzO+zlU32m1FJnTvD5NoFHpWZrrn8n+mzDT/WNINmW+5Pibel9AxCl9WsWcKG/T5P1OYZ0BWC5LrukaQZHRApyJCzANxOUg49FDIUi4wgW1CmotQ9rb5cp289i6wr4I7ERADIArBACeUgRjgkIu5apdl21fBURr5aAAGGBGPFota6YAlkMG8kgn800O+oPhAQY3KQfOkdaS0o9MYXVjYlhT2GuwjUiHt+jLCtqWwW4i6CY55WlWIVOm80rHohKGQ4ihUnZsPznLwQbZoUb/MlHoeR88UmDn7VUhXIzBz+J1R0EdJhcidZSXurCiE4SgAx5CMEG2pQQxHwaz43YHB4o6pkdWZ55OlpG2txh/UhQQmwiNpqaW5Rcxa6ayVzmamJAp3+ZL2tyoKFlWXG4UM8Xqt0HCFRa7FxyEOUQJGRBFLMGVWWp+lqsvnYHawEjQoUzDBIbIyqza1E66CnQtLQA8QDHraaawdbP2IeFVbPMQEAX4i4nAIPHyscS/htoipOceyh2lM4GlXHOJLlxrZ3rZ5QWUWVlUGVRR2ZT/rRlkuImS2TKOWgQQPwy5IuA8XlKugx0dg4/bGNbBxsAFg6IGNNzdAH3pDRNPD0EfgKNpXHJ7OVXi6dV2FSI4OfTg3CocpiPokcu/vrtUgS/9W3auLQoaS3fko0mqx6xwMRqF388t9uH1zdkE1GLTdm8q3OczTeob3KuLJ0vKkoizSq6kcegn08IjyNDvRg+/YsoMSby9ZFrhHUQLcEWVRAPbv3gWWdY7+rljR4qNpu+bYos3kj7xUzJT6mwB7e820y2zqnae/mS/q9J798tH0H+87tt/JBnmqpp+qLNTM2kFnRLLZfAyA8TiB4RCBFk96OpnkE3xqnWfCd0J+WnT3QIsfG9oKh+Ce8gqAA+WGr4zHcjnfQrED2FtrNBrj8TpFyTF2ZwlPLdbFK+beRpTCYcniGqsqbDscEZLZ59AYhsAlkNK9Zppvzd5tx+ajZdsNmbapazxGoWeYlRt+EI6Cy7L6oLD6tSgciqUrMzwvF89nfQGmycQqas/qnbwpd8JRaRF0jEhRdNJV7eiuwOBlReNuNYYajUZDYps/NhRIMz/yuDXpeCO1QTzWe7JVyqV0pDXLrMN6sxoN4UVpl3Ce1G+bybi408tf69+Vv+AbL/ZrVm3N3vTXT5799sGzx59OP/jh9OO/T5+8x/egSi00OraHjyVF1rDdbKZLeVX6UC0NFBZ1/E7KrZWs9/9hn8a738rnvp1ydrFByfRHUawAW1qd2ReDllIaT/KSYhYfOv5WZpQK1SrDCrbgxm2poanTzOfwALS+Cmnab+tZ5IjCOvda3sk2SwcGK+5a1dGk5zCvN/3oZ2eP/uLYzEtfRbzz17PfvP3so6fF68OHz//5iXi1WVLSY1cocpg4d8v4zTFibKswr4ocmNfLg5zaUbPIYBHe+crQ8EiIV4Hoeil8MewjMkdXzBdqEZSBu4UGcETYN3heTSb//vTnzx99OH3wWRek69U5mZ+OHdcYZPq7jgYMjzt2CguTDEyY1RxATl/TrSOv1IQvhb6zd/44ffx+HfpehRTlL6IJvjwozj57vxBw1KTsi+oTh8OSvGJiKaAL/y6N9Cqggy8c0vW3MrGX68V6VldLvjkcXvhNS5b8cqapZ1QVXmWOfPCLf/3t6fTH7+bYnz786fTBZ4ukQkUiVKVB7ok0RmYCVMJ/AfAvBK0aYNUBxISHCQ4DGiVgGECYRX8FGmrL65oSWkXI4pw5Cwu59Dz4PL8XIkzFuSuBygy+vAhcLsqUl8WTF4FyJUfK1+UZ8lISoL5dW6LE1crbha4gLpU3f/T76cPf5fh//vFfzx5/v1RhTH/y7vTJe+rgBbOiaDDLyKhJifM1nXpjuWAmvIG+O0KUldJAjp4rt95ANI5CigyRYni+zIthua6xr2bsRT1ai+dGBVobjYaYkSeI9KZsFcWC8Xg9SMFfNdlw/G0Nm12hn39kWLQeKDnI7doWFwncsPWg3EQ2MsPWA62FlLcNM9pHcU8hkZ/djqykYZQ3IKroLJ+kniykfK+qxXxholzWmMeJOrXsMVISq3V9mtzL6PWye6F8f0UaZDOFizT861dISrC101l+1k96lbE3i5FZ8V9hy7YUGIwdfX6AWEU9UTZTqyPmIOziPdaKEDYeI0LnElfVkZIxVXpbKkFz9qs/nb3zdPqDT+Rt6ZqurMSr4kipI9aK2dRA9YB/wawvmPUFs75g1v8JZq0krsrKenlqrb4VA+W+MPvFperXIf13Ib+T/Sm3iv66vwUqfi4v9VZZIrTiJGJRuVX78O2zP/8hf91/5ZXSgq/BY1jTyZW6uHIHV7S/qcXln1mSrP99nZuV4XKt3BnpC8xuJ8NnxHh/XTu/H8dzJPCNVi/R2yk9zFobpVwHOLYYdmz5N/r/CQAA//+NEFJOtS8AAA==",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWz2/aMBS+5694IzusqgL3CjisXTVNbVW1aJdqWg08IJKxs9hBq2L/75N/JHaADKRKuyyX+Nl5L9/7vs9OUngsueQLTuGGL6otMklkzlkyJsDIFicDyYvBaJokaQozMqcIfAXXnElkUiR1XRK2Rhje5hSF1kldf1zlFH+aXLiawPCBbFHrDF7q2o9/fErb8UUC0Na4RyHI2pQBcAl3nK3jpNuK0jgR2VLruMQXVm3flf9bIhM5Z00R01dGcYcUwpotFvrUOsN2rafwM5a7fBH3dhpXc8/g5XlBKCnhO6EVwuytQINB2MlsZyYzaSYvkrMVCQK3WIzM4wIIzddsMijz9UYOpmMCmxJXk0FqjDCd8WI8ItPxqHCWaJOTuh7eoFiUeWH8o3UEJQjbeWvo2hvMlguaHS2Zr2D4lYjbHOnSFFRgh6AsLaDgjsyRgoIoE1SiIDMXuDt0Q3+Bitkz9SGzKqrQJqjWWOZ9sYAuvnBPWxT28bpmfF5CtxPXxw2uSEWlVVVr8OEV2L7jJe8EC7DrjcBIbN1EBbcGZj4TYW4P1XaOZR9Dhyy1JPWzFd59lLEOYS42JwjJWc7W+ysO3r+hzi2NP2QZIFvC1vsUsmwa2dcfKu/1rgKzdEqAM9i2nfUyfYq/iIlDBtC02rR/zFgRBz0HYMvH0aPz/3Xm64E1X3u9GQTp8L/ny/BNOcOaf7HlPcoNXzbufMJfFQrZSPOEouBMYBP3SrOvwn64H6v4+2AA9J+2HtL+oeunu2eve95hPivh1CY5kER42hs1/F5KUzj8Sht6h4X5w2r4e+ASBSi4vrxspr6RHWnGj29yw5mPjtMb8QiHW+PIHnCwAr2xWezfnyNjAKMpdKe8FgZyuz2KIl4z2OPY4W9mWnb+BAAA///ASSPYZwoAAA==",
	"scalars.json": "H4sIAAAAAAAA/9yXTWsaQRjH736KwVMKCYK1VnqrAcGz9hRSWHWybtnubnd3SqQUEpsSD6JQ1BQb2h5KWkqiPVj6EtN8mLiz5uRXKO6gO6Ozq4a0Id6W52Vm/r/5zwO7EQDgRQAAAIKarppquqDB4AMQzKkoI8PgKkkpqgmNYXgUyGoavzJr8OPieOUtWRXMaGSUeCI8F/gtWl5jesbxgplXFW5KR5nCKJFwEgEAXq56aGRa/SQyha5CJjwh8G6YJ5DV8a/1SQp1jLG+3tm5XftiVd9e1s/tbsP+uHuxU7Tav/qdD7j+jURwvWRX9vt/XvXOKoNu2Toq4veH1skBbn3vdZtkBVI/6Jb77R8kYjgbXuwUOQiZs7gIJYUDkKml8VHVFDxJMaEIdT4+qoWGF5dEBT0Fqg4S0vbwa0UwgA6fIUmHuTuzqLru/U9UoxFPqu5ZXKqyqohcrPxnR5dPcw0Zpi5RBZN4Q3T7NGNflmgBi3LkIw9XIa6t0DX7aobwK5kLLeAuDyA8QyC+I9DNWOJKZIwFrHL5pjR+erhdczrxuw55f8s+n4wFLDQNKhqZDepWj5wtaRvmOEayWs0xmUG3TMhYnz73flfCj8Mxu7mH6x0ymnG7hubx1M2Op2u2lcON4ytfbveiHG4zLXY7ppj/I5zHZks/iebxzHJOmYyqyvP8WdB1rkw6KnLXpFUO41BQOEInM4zCiSQtMK0juC4LhhFKCLJBPv1vmiHp3nP1q/V6t9/6+SidWIvhUuP+WkYywcPUejKJG/v48Jh/++xyLhc2LnpsT7NJsVec99iCJWOYeggpUlbNQR4dsiZYcUT5v4BMYUhiCovDpHd6iveq1smBfXy0GIZ4wYQpDxQbm8M9eSimu+bH4YfBuc21WDyZJiwCm4G/AQAA//+qprk/VRAAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
